function sortHeaders(n, t) {
    var i = n.name.toLowerCase(),
        r = t.name.toLowerCase();
    return i < r ? -1 : i > r ? 1 : 0
}

function getClassStyle(n) {
    var t = "";
    return n.match(/(200|201|202|203|204|205|206|207)/g) !== null && (t = "success"), n.match(/(300|301|302|303|304|305|306|307)/g) !== null && (t = "info"), n.match(/(400|401|402|403|404|405|406|407|408|409|410|411|412|413|414|415|416|417)/g) !== null && (t = "error"), n.match(/(500|501|502|503|504|505)/g) !== null && (t = "warning"), t
}

function parseURL(n) {
    var t = {},
        i = n.match(/^([^:]+):\/\/([^\/:]*)(?::([\d]+))?(?:(\/[^#]*)(?:#(.*))?)?$/i);
    return i ? (t.scheme = i[1].toLowerCase(), t.host = i[2], t.port = i[3], t.path = i[4] || "/", t.fragment = i[5], t) : t
}


function QueryStringParser(req) {
    var getQueryFromUrl = function(url){
        var queryIndex = url.indexOf("?");
        if(queryIndex >= 0 && (queryIndex+1) < url.length)
        {
            return url.substring(queryIndex+1);
        }
        return null;
    };
    var qstr = getQueryFromUrl(req);
    var query = "";
    if (qstr) {
            // var a = qstr.substr(1).split('&');
            if (qstr.indexOf('&') !== -1 ) {
                var a = qstr.split('&');
            } else {
                var a = [];
                a.push(qstr);
            }
            for (var i = 0; i < a.length; i++) {
                var b = a[i].split('=');
                query += "<tr><td><b>"+decodeURIComponent(b[0])+"</b></td><td>"+ (decodeURIComponent(b[1]) || '') + "</td></tr>";
            }
            return query;
        } else {
            return "<tr><td colspan=2>NO QUERY PARAMETERS</td></tr>";
        }
    }

    function QueryParametersExist(req) {
        return (req.indexOf("?") !== -1 ? true : false);
    }

    function toggleCaptureButton() {
        captureTraffic == !0 ? ($("#capture").parent().addClass("active"), $("#capture").children("i").removeClass("icon-ban-circle").addClass("icon-ok-circle")) : ($("#capture").parent().removeClass("active"), $("#capture").children("i").removeClass("icon-ok-circle").addClass("icon-ban-circle"));
        showInfo(selectedInfo)
    }

    function toggleRawViewButton() {
        settings.view_Raw == !0 ? ($("#rawView").parent().addClass("active"), $("#rawView").children("i").removeClass("icon-ban-circle").addClass("icon-ok-circle")) : ($("#rawView").parent().removeClass("active"), $("#rawView").children("i").removeClass("icon-ok-circle").addClass("icon-ban-circle"));
        showInfo(selectedInfo)
    }

    function saveSettings() {
        settings.cap_MainFrame == !1 && settings.cap_SubFrame == !1 && settings.cap_Stylesheet == !1 && settings.cap_Script == !1 && settings.cap_Image == !1 && settings.cap_Object == !1 && settings.cap_Xmlhttprequest == !1 && settings.cap_other == !1 && (settings.cap_MainFrame = !0, settings.cap_SubFrame = !0, settings.cap_Stylesheet = !0, settings.cap_Script = !0, settings.cap_Image = !0, settings.cap_Object = !0, settings.cap_Xmlhttprequest = !0, settings.cap_other = !0);
        localStorage.lhhSettings = JSON.stringify(settings)
    }

    function capture(n) {
        switch (n) {
            case "main_frame":
            return settings.cap_MainFrame;
            case "sub_frame":
            return settings.cap_SubFrame;
            case "stylesheet":
            return settings.cap_Stylesheet;
            case "script":
            return settings.cap_Script;
            case "image":
            return settings.cap_Image;
            case "object":
            return settings.cap_Object;
            case "xmlhttprequest":
            return settings.cap_Xmlhttprequest;
            case "other":
            return settings.cap_other;
        }
        return !1;
    }

    function resetAll() {
        selectedInfo = 0;
        headerInfo = {};
        headerInfo.response = [];
        headerInfo.request = [];
        $("#result").empty();
        $("#responseList > tbody").empty();
        $("#previewArea").empty().html(defaultText);
    }

    function resizeWindow() {
        $(".results").css("height", "0px");
        $(".preview").css("width", "0px");
        $("#mainTable").height($(window).height() - $(".nav").height() - 8);
        $(".results").css("height", $("#mainTable td").css("height"));
        $(".preview").css("width", $("#previewArea").css("width"));
        $(".codeBlock").height($("#previewArea").height());
        $(".codeBlock").width($("#previewArea").width());
    }

    function showHeader(n) {
        var i = n - 1,
        r = headerInfo.response[i].url,
        u = headerInfo.response[i].statusLine.split(" "),
        t = "",
        q = ( QueryParametersExist(r) ? "active" : null); 
        t += "<tr class='"+q+"' >";
        t += '<td class="rId">' + (i + 1) + "<\/td>";
        t += '<td class="rMe">' + headerInfo.request[i].method + "<\/td>";
        t += '<td class="rSt"><span class="badge badge-' + getClassStyle(headerInfo.response[i].statusLine) + '">' + u[1] + "<\/span><\/td>";
        t += '<td><span class="inputUrl">' + r + '<\/span><\/td>';
        // t += '<td><input type="text" class="inputUrl" value="' + r + '" /><\/td>';
         t += "<\/tr>";

    settings.list_Ascending == !0 ? (headerInfo.response.length >= 500 && $("#responseList > tbody tr").first().remove(), $("#responseList > tbody:last").append(t)) : (headerInfo.response.length >= 500 && $("#responseList > tbody tr").last().remove(), $("#responseList > tbody:first").prepend(t))
    $("#filter").trigger("keyup");
}

function showInfo(n) {
    n !== 0 && (settings.view_Raw == !0 ? showRawInfo(n) : showNiceInfo(n))
}



function showNiceInfo(n) {
    var i = n - 1,
    t, r, e, f, u;

    for(headerInfo.request[i].requestHeaders.sort(sortHeaders)
        , headerInfo.response[i].responseHeaders.sort(sortHeaders), t =
        '<div class="results preview" style="overflow: auto;">', t +=
        '<table class="table table-bordered table-condensed table-hover">'
        , t += '<tr class="' + getClassStyle(headerInfo.response[i].statusLine) +
        '"><td colspan="2">', t += "<b>" + headerInfo.request[i].method +
        "<\/b> " + headerInfo.response[i].url +
        "<br /> <b>Status:<\/b> " + headerInfo.response[i].statusLine, t +=
        "<\/td><\/tr>"
        , q = headerInfo.response[i].url
        , x = QueryStringParser(q.toString())
        , t +='<tr class="warning"><td colspan="2"><b>Query Parameters<\/b><\/td><\/tr>'
        , t += x
        ,t += '<tr class="warning"><td colspan="2"><b>Request Headers<\/b><\/td><\/tr>'
        , r = 0, e = headerInfo.request[i].requestHeaders.length; 
        r < e; 
        ++r) 
        f = headerInfo.request[i].requestHeaders[r].name, u =
    headerInfo.request[i].requestHeaders[r].value, f.toLowerCase() ===
    "cookie" && (u = u.replace(/; /g, ";<br />")), t += "<tr>", t +=
    '<th nowrap="nowrap" class="span2">' + f + "<\/th>", t += "<td>" +
    u + "<\/td>", t += "<\/tr>";


    for (t += '<tr class="warning"><td colspan="2"><b>Response Headers<\/b><\/td><\/tr>', r = 0, e = headerInfo.response[i].responseHeaders.length; r < e; ++r) f = headerInfo.response[i].responseHeaders[r].name, u = headerInfo.response[i].responseHeaders[r].value, f.toLowerCase() === "cookie" && (u = u.replace(/; /g, ";<br />")), t += "<tr>", t += '<th nowrap="nowrap">' + f + "<\/th>", t += "<td>" + u + "<\/td>", t += "<\/tr>";
        t += "<table><\/div>";
    $("#previewArea").empty().html(t);
    resizeWindow();
}

function showRawInfo(n) {
    var t = n - 1,
    i, r, f, e, o;
    headerInfo.request[t].requestHeaders.sort(sortHeaders);
    headerInfo.response[t].responseHeaders.sort(sortHeaders);
    var h = headerInfo.response[t].statusLine.split(" "),
    u = parseURL(headerInfo.response[t].url),
    s = u.host;
    for (u.port != undefined ? s += ":" + u.port : u.scheme == "https" && (s += ":443"), i = "", i += '<textarea wrap="off" class="codeBlock input-block-level" readonly="readonly" rows="{Rows1}">', i += headerInfo.request[t].method + " " + u.path + " " + h[0] + "\n", i += "Host: " + s + "\n", r = 0, f = headerInfo.request[t].requestHeaders.length; r < f; ++r) e = headerInfo.request[t].requestHeaders[r].name, o = headerInfo.request[t].requestHeaders[r].value, i += e + ": ", i += o + "\n";
        for (i += "\n", i += headerInfo.response[t].statusLine + "\n", r = 0, f = headerInfo.response[t].responseHeaders.length; r < f; ++r) e = headerInfo.response[t].responseHeaders[r].name, o = headerInfo.response[t].responseHeaders[r].value, i += e + ": ", i += o + "\n";
            i += "<\/textarea>";
        $("#previewArea").empty().html(i);
        resizeWindow();
    }
    var headerInfo = {},
    settings = {},
    tabId = "",
    selectedInfo = 0,
    captureTraffic = !0,
    defaultText = "";


    $(function() {
        headerInfo.response = [];
        headerInfo.request = [];
        defaultText = $("#previewArea").html();
        chrome.webRequest.onHeadersReceived.addListener(function(n) {
            capture(n.type) === !0 && captureTraffic === !0 && (headerInfo.response.push(n), showHeader(headerInfo.response.length));
        }, {
            urls: ["<all_urls>"],
            types: ["main_frame", "sub_frame", "stylesheet", "script", "image", "object", "xmlhttprequest", "other"]
        }, ["blocking", "responseHeaders"]);
        chrome.webRequest.onSendHeaders.addListener(function(n) {
            capture(n.type) === !0 && captureTraffic === !0 && headerInfo.request.push(n)
        }, {
            urls: ["<all_urls>"],
            types: ["main_frame", "sub_frame", "stylesheet", "script", "image", "object", "xmlhttprequest", "other"]
        }, ["requestHeaders"]);
        $("#responseList").click(function(n) {
            if (n.toElement.nodeName.toLowerCase() == "td" || n.toElement.nodeName.toLowerCase() == "input" || n.toElement.nodeName.toLowerCase() == "span") {
                var t = $(n.toElement).closest("tr").children().first("td").html();
                $(n.toElement).closest("tr").children("td").children("input").select();
                selectedInfo = t;
                showInfo(t)
            }
        });
        $("#clearAll").click(function() {
            resetAll();
        });
    // $("#showAll").click(function() {
    //     showAll();
    // });
    $("#rawView").click(function() {
        settings.view_Raw = settings.view_Raw == !1;
        saveSettings();
        toggleRawViewButton();
    });
    $("#capture").click(function() {
        captureTraffic = captureTraffic == !1;
        showInfo(selectedInfo);
        toggleCaptureButton();
    });
    $("#settings").click(function() {
        $("#setMainFrame").prop("checked", settings.cap_MainFrame);
        $("#setSubFrame").prop("checked", settings.cap_SubFrame);
        $("#setStylesheet").prop("checked", settings.cap_Stylesheet);
        $("#setScript").prop("checked", settings.cap_Script);
        $("#setImage").prop("checked", settings.cap_Image);
        $("#setObject").prop("checked", settings.cap_Object);
        $("#setXHR").prop("checked", settings.cap_Xmlhttprequest);
        $("#setOther").prop("checked", settings.cap_other);
        settings.view_Raw == !0 ? ($("#viewTypeNice").prop("checked", !1), $("#viewTypeRaw").prop("checked", !0)) : ($("#viewTypeRaw").prop("checked", !1), $("#viewTypeNice").prop("checked", !0));
        settings.list_Ascending == !0 ? ($("#listDescending").prop("checked", !1), $("#listAscending").prop("checked", !0)) : ($("#listAscending").prop("checked", !1), $("#listDescending").prop("checked", !0))
    });
    $("#saveSettings").click(function() {
        // $("#myModal").modal("show");
        settings.cap_MainFrame = $("#setMainFrame").prop("checked");
        settings.cap_SubFrame = $("#setSubFrame").prop("checked");
        settings.cap_Stylesheet = $("#setStylesheet").prop("checked");
        settings.cap_Script = $("#setScript").prop("checked");
        settings.cap_Image = $("#setImage").prop("checked");
        settings.cap_Object = $("#setObject").prop("checked");
        settings.cap_Xmlhttprequest = $("#setXHR").prop("checked");
        settings.cap_other = $("#setOther").prop("checked");
        settings.view_Raw = $("#viewTypeRaw").prop("checked");
        var n = $("#listAscending").prop("checked");
        settings.list_Ascending != n && (settings.list_Ascending = $("#listAscending").prop("checked"), resetAll());
        toggleRawViewButton();
        saveSettings();
        $("#myModal").modal("hide")
    });
    $("#filter").keyup(function(){
        // var val = $("#filter").val();
        var data=this.value.split(" ");
        var jo = $("#responseList").find("tr");
        // console.log ('filter value is now',val);
        if (this.value == ""){
            jo.show();
            return;
        }
        jo.hide();
        jo.filter(function (i, v) {
            var $t = $(this);
            for (var d = 0; d < data.length; ++d) {
                if ($t.is(":contains('" + data[d] + "')")) {
                    return true;
                }
            }
            return false;
        })
        //show the rows that match.
        .show();
    });
    $('#responseList').on('update', function(){
        console.log('Table updated..')
    });
    $("#urlClear").click(function(){
        $("#filter").val("");
        $("#responseList").find("tr").show();
    });

    var n = localStorage.lhhSettings;
    n != undefined ? settings = JSON.parse(n) : (settings.cap_MainFrame = !0, settings.cap_SubFrame = !0, settings.cap_Stylesheet = !0, settings.cap_Script = !0, settings.cap_Image = !0, settings.cap_Object = !0, settings.cap_Xmlhttprequest = !0, settings.cap_other = !0, settings.view_Raw = !0, settings.list_Ascending = !1, saveSettings());
    chrome.tabs.getCurrent(function(n) {
        chrome.extension.getBackgroundPage().viewTabId = n.id
    });
    resizeWindow();
    toggleRawViewButton()
});
$(window).resize(function() {
    resizeWindow()
});;